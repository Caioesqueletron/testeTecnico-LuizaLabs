name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
      - dev
  pull_request:
    branches:
      - prod
      - dev

jobs:
  test-pipeline:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Test Pipeline
        run: echo "Ol√° Mundo"

  build-and-test:
    if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Change wrapper permissions
        run: chmod +x ./gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and Test
        run: |
          ./gradlew clean build
          ./gradlew test

      - name: Run Checkstyle Report
        if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/dev'
        run: |
          ./gradlew checkstyleMain checkstyleTest

  deploy-application:
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Fly.io CLI
        run: curl -L https://fly.io/install.sh | sh

      - name: Deploy Application
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="/root/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          flyctl auth token $FLY_API_TOKEN
          flyctl deploy
          flyctl auth logout

  check-code-coverage:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.verbose=true \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}